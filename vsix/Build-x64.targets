<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <!--This setting can be tweaked to change the verbosity level of the 64-bit build.
    The available verbosity levels are: quiet, minimal, normal, detailed, and diagnostic
    -->
    <BuildX64Verbosity>normal</BuildX64Verbosity>
    
    <ChildMSBuildCommandLineStart>"$(MSBuildBinPath)\msbuild.exe" /nologo /m ..\halfVisualizer.sln /p:Configuration=$(Configuration) /p:Platform=x64 /v:$(BuildX64Verbosity)</ChildMSBuildCommandLineStart>
    <!-- The following line passes DevEnvDir to the x64 build if it is defined.
         The trailing slashes here are necessary to escape the original trailing slash in the definition of these directories.
         Without this trailing slash, the quote would get escaped and would be forwarded through the build incorrectly.-->
    <ChildMSBuildCommandLineStart Condition=" '$(DevEnvDir)' != '' ">$(ChildMSBuildCommandLineStart) /p:DevEnvDir="$(DevEnvDir)\"</ChildMSBuildCommandLineStart>
  </PropertyGroup>

  <Target Name="Build-x64" BeforeTargets="ZipItems">
    <!--Unfortunately we can't use the 'MSBuild' task here but must instead spawn a new instance of msbuild. The problem is that the 'MSBuild' task will stil
    inherit some aspects of the current solution configuration, and when it is resolving project to project references will reference the output from the
    wrong configuration-->
    <Error Condition="'$(_BuildActionType)'==''" Text="'_BuildActionType' is not defined."/>
    <Exec Command="$(ChildMSBuildCommandLineStart) /t:$(_BuildActionType)"/>
  </Target>
  <Target Name="Clean-x64" BeforeTargets="Clean">
    <Exec Command="$(ChildMSBuildCommandLineStart) /t:Clean" />
  </Target>
  
</Project>